var app = require('../app');
var debug = require('debug')('ri-api:server');
var http = require('http');

import uuid from 'uuid/v4';

var port = process.env.PORT || '3000';
app.set('port', port);
var server = http.createServer(app);


/*
var io = require('socket.io')(server);
io.on('connection', function(socket){
  console.log('a user connected');
});
*/

const io = require('socket.io')(server, {
  origins: ['http://localhost:9000','http://onet.pl:9000'],
});

app.set('socket.io', io);

io.on('connection', function(socket){
  const myUuid = uuid();

  socket.emit('uuid', myUuid);
  socket.on(myUuid, function(msg){
    io.emit(myUuid, msg+' - server');
   console.log('message: ' + msg, myUuid);
 });

  console.log('a user connected');
  socket.on('disconnect', function(){
    console.log('user disconnected');
  });



});



  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);


function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
